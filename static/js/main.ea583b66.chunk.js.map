{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/img.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","value","GlobalStyle","createGlobalStyle","BGIMG","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","HARD","startAPI","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea583b66.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=18&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    //console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n        }\r\n     ));\r\n};","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width : 1100px;\r\n    background : #ebfeff;\r\n    border-radius : 10px;\r\n    padding : 20px;\r\n    box-shadow : 0px 5px 10px rgba(0,0,0,0.3);\r\n    text-align : center;\r\n    \r\n    p {\r\n        font-size : 1rem;\r\n    }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    \r\n    transition : all 0.3s ease;\r\n    :hover{\r\n        opacity : 0.8;    \r\n    }\r\n    button {\r\n        cursor : pointer;\r\n        user-select : none;\r\n        font-size : 0.8rem;\r\n        width : 100%;\r\n        height : 40px;\r\n        margin : 5px 0;\r\n        background : ${({ correct, userClicked }) =>\r\n            correct\r\n            ? 'green'\r\n            : !correct && userClicked\r\n            ? 'orange'\r\n            : 'blue'\r\n        };\r\n        border-color:white;\r\n        color: #fff;\r\n    }\r\n`;","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\n//style\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNr, totalQuestions }) => {\r\n    return (\r\n        <Wrapper>\r\n            <p className='number'> Question : {questionNr} / {totalQuestions}</p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper\r\n                        key={answer}\r\n                        correct={userAnswer?.correctAnswer === answer }\r\n                        userClicked={userAnswer?.answer === answer}\r\n                    >\r\n                        <button disabled={userAnswer ? true : false} onClick={callback} value={answer}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                    ))\r\n                }\r\n            </div>\r\n        </Wrapper>      \r\n        );\r\n};\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/img.0c63ef4e.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGIMG from './images/img.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height : 100%;\r\n    }\r\n    body {\r\n        background-image : url(${BGIMG});\r\n        background-size : cover;\r\n        margin : 0;\r\n        padding : 0 20px;\r\n        display : flex;\r\n        justify-content : center;\r\n    }\r\n    *{\r\n        box-sizing : border-box;\r\n        font-family : 'Catamaran' sans-serif;\r\n        \r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n    \r\n    > p {\r\n            color : #fff;\r\n        }\r\n    .score {\r\n        color : #fff;\r\n        font-size : 2rem;\r\n        margin : 0;\r\n    }\r\n    h1{\r\n        font-family : Algerian;\r\n        font-size : 70px;\r\n        text-align : center;\r\n        margin : 20px;\r\n        font-weight:400;\r\n        color:white;\r\n        background : transparent; \r\n    }\r\n    \r\n    .start , .next {\r\n        cursor : pointer;\r\n        border : 2px solid #d38558;\r\n        box-shadow : 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius : 10px;\r\n        height : 40px;\r\n        margin : 20px 0;\r\n        padding : 0 40px;\r\n    }\r\n\r\n    .start{\r\n       max-width:200px; \r\n    }\r\n\r\n`","import React, { useState } from 'react';\n//types and component\nimport { fetchQuestions, Difficulty, QuestionState } from './API';\n//component\nimport QuestionCard from './components/QuestionCard';\n//styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n}\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n\n    console.log(fetchQuestions(TOTAL_QUESTIONS, Difficulty.HARD));\n\n    const startAPI = async () => {\n        //initilize every thing\n\n        setLoading(true);   //before the question is loaded\n        setGameOver(false);\n        const newQuestions = await fetchQuestions(\n            TOTAL_QUESTIONS,\n            Difficulty.HARD\n        );\n\n        setQuestions(newQuestions);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);      //after the question is loaded\n\n    };\n\n    const checkAns = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            //user ans\n            const answer = e.currentTarget.value;\r\n            //check ans against correct ans\r\n            const correct = questions[number].correct_answer === answer;\r\n            //add score if ans is correct\r\n            if (correct) setScore(prev => prev + 1);\r\n            //save ans in the array for user Answer'\r\n            const answerObject = {\r\n                question : questions[number].question,\r\n                answer: answer,\r\n                correct: correct,\r\n                correctAnswer: questions[number].correct_answer,\r\n            };\r\n            setUserAnswers(prev => [...prev, answerObject]);\r\n        }\n    };\n\n    const nextQues = () => {\n        //move on to the next question if not the last\r\n        const nextQuestion = number + 1;//here number starts from [0,1,...,9]\r\n\r\n        if (nextQuestion === TOTAL_QUESTIONS) {\r\n            setGameOver(true);\r\n        }\r\n        else {\r\n            setNumber(nextQuestion);\r\n        }\r\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n            <h1>Computer Quiz</h1>\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n            <button className='start' onClick={startAPI}>\n                    Start\n            </button>\n            ) : null}\n            {!gameOver ? (< p className='score'> Score : {score}</p>) : null}\n            {loading && (<p > Loading Question : </p>)}     \n            {!loading && !gameOver &&\n                <QuestionCard\n                questionNr={number + 1}\n                totalQuestions={TOTAL_QUESTIONS}\n                question={questions[number].question}\n                answers={questions[number].answers}\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                callback={checkAns}\n                />\n            }\n            {!loading && !gameOver && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1 ?\n                (<button className='next' onClick={nextQues}>\n                Next Question\n                </button>)\n                :\n                null\n                }\n            </Wrapper>\n             </>\n    );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}